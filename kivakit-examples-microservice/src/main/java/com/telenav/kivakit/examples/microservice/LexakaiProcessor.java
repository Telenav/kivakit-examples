package com.telenav.kivakit.examples.microservice;

import com.telenav.kivakit.component.BaseComponent;
import com.telenav.kivakit.filesystem.Folder;
import com.telenav.kivakit.kernel.language.vm.Processes;
import com.telenav.kivakit.network.http.HttpNetworkLocation;
import com.telenav.kivakit.resource.path.FileName;
import com.telenav.kivakit.resource.resources.jar.launcher.JarLauncher;
import org.eclipse.jgit.api.Git;
import org.kohsuke.github.GHPullRequest;
import org.kohsuke.github.GitHub;

import java.net.URI;

import static com.telenav.kivakit.resource.resources.jar.launcher.JarLauncher.ProcessType.CHILD;
import static com.telenav.kivakit.resource.resources.jar.launcher.JarLauncher.RedirectTo.CONSOLE;

/**
 * Generates a documentation pull request generated by Lexakai for the given GitHub public repository URL.
 *
 * @author jonathanl (shibo)
 */
public class LexakaiProcessor extends BaseComponent
{
    /**
     * Creates a documentation pull request for the given branch of the given GitHub public repository
     *
     * @return Pull request or null if no pull request was created
     */
    public GHPullRequest process(String owner, String repository, String branch)
    {
        // Create a temporary folder for [owner]/[repository]/[branch]
        final var temporaryFolder = Folder.temporaryForProcess(Folder.Type.CLEAN_UP_ON_EXIT)
                .folder(owner)
                .folder(repository)
                .folder(branch)
                .mkdirs();

        // and inside it, a branch called "lexakai-[time]" for our pull request
        final String branchName = "lexakai-" + FileName.dateTime();
        final var repositoryFolder = temporaryFolder
                .folder(branchName)
                .mkdirs();

        // Clone the given branch of the given github repository,
        final URI uri = URI.create("https://github.com/" + owner + "/" + repository);
        if (uri != null)
        {
            try (var git = Git.cloneRepository()
                    .setBranch(branch)
                    .setURI(uri.toString())
                    .setDirectory(repositoryFolder.asJavaFile())
                    .call())
            {
                // create a branch to work on,
                git.branchCreate().setName("feature/" + branchName);

                // and if we can generate documentation with Lexakai in the repository folder,
                if (lexakai(repositoryFolder))
                {
                    // commit the changes,
                    git.commit();

                    // and create a pull request for them.
                    return createPullRequest(owner, repository, "feature/" + branchName);
                }
            }
            catch (Exception e)
            {
                problem(e, "Unable to clone and process repository: $", uri);
            }
        }
        else
        {
            problem("Internal error: Cannot create URI from: $/$", owner, repository);
        }
        return null;
    }

    /**
     * Creates a pull request on GitHub for the given repository and branch
     *
     * @return Pull request or null if no pull request was created
     */
    private GHPullRequest createPullRequest(final String ownerName,
                                            final String repositoryName,
                                            final String branchName)
    {
        try
        {
            var pullRequest = GitHub.connectAnonymously()
                    .getRepository(ownerName + "/" + repositoryName)
                    .createPullRequest("Lexakai Documentation Update", branchName, "develop",
                            "Lexakai (https://www.lexakai.org) generated this documentation update from Java source code in this repository.");

            final long identifier = pullRequest.getId();
            information("Created pull request #$: $", identifier, branchName);
            return pullRequest;
        }
        catch (Exception e)
        {
            problem(e, "Unable to create pull request for $/$/$", ownerName, repositoryName, branchName);
            return null;
        }
    }

    /**
     * Generates documentation for the given repository with Lexakai (https://www.lexakai.org)
     *
     * @param repository The cloned local repository
     * @return True if successful
     */
    private boolean lexakai(final Folder repository)
    {
        try
        {
            //  Run Lexakai on the repository
            var lexakai = HttpNetworkLocation.parse(this,
                    "https://repo1.maven.org/maven2/com/telenav/lexakai/lexakai/1.0.0/lexakai-1.0.0.jar");

            var process = listenTo(new JarLauncher()
                    .processType(CHILD)
                    .arguments("-deployment=local"
                            + " -overwrite-resources=true"
                            + " " + repository))
                    .addJarSource(lexakai)
                    .redirectTo(CONSOLE)
                    .run();

            Processes.waitFor(process);

            final int exitCode = process.exitValue();
            if (exitCode != 0)
            {
                problem("We're sorry but UML generation failed with exit code: $", exitCode);
            }
            return exitCode == 0;
        }
        catch (Exception e)
        {
            problem(e, "Unable to process repository with Lexakai: $", repository);
            return false;
        }
    }
}
